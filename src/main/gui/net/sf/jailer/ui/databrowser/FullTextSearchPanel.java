/*
 * Copyright 2007 - 2022 Ralf Wisser.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.sf.jailer.ui.databrowser;

import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import net.sf.jailer.ui.UIUtil;

/**
 * Full Text Search Panel.
 * 
 * @author Ralf Wisser
 */
public class FullTextSearchPanel extends javax.swing.JPanel {

	// TODO
	// search state restore after reload in SQL console
	
	// TODO
	// counter label
	
	// TODO
	// in-place editing robustness
	
	
	private final JTable table;
	
    /**
     * Creates new form FullTextSearchPanel
     * @param table 
     */
    public FullTextSearchPanel(JTable table) {
    	this.table = table;
    	
        initComponents();
        
        setVisible(false);
        
        // TODO
        searchField.setText("not yet available");
        
        closeButton.setText(null);
        closeButton.setIcon(UIUtil.scaleIcon(UIUtil.scaleIcon(closeButton, closeIcon), 0.8));
        prevButton.setText(null);
        prevButton.setIcon(UIUtil.scaleIcon(prevButton, prevIcon));
        nextButton.setText(null);
        nextButton.setIcon(UIUtil.scaleIcon(nextButton, nextIcon));
        
        searchField.setMinimumSize(new Dimension(200, searchField.getMinimumSize().height));
        searchField.setPreferredSize(new Dimension(200, searchField.getMinimumSize().height));
        
        KeyListener keyListener = new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) {
				if (e.getKeyChar() == KeyEvent.VK_ESCAPE) {
					close();
				}
			}
			@Override
			public void keyReleased(KeyEvent e) {
			}
			@Override
			public void keyPressed(KeyEvent e) {
			}
		};
		searchField.addKeyListener(keyListener);
		nextButton.addKeyListener(keyListener);
		prevButton.addKeyListener(keyListener);
		closeButton.addKeyListener(keyListener);
		
		searchField.getDocument().addDocumentListener(new DocumentListener() {
			@Override
			public void removeUpdate(DocumentEvent e) {
				update(searchField.getText());
			}
			@Override
			public void insertUpdate(DocumentEvent e) {
				update(searchField.getText());
			}
			@Override
			public void changedUpdate(DocumentEvent e) {
				update(searchField.getText());
			}
		});
		
		table.addPropertyChangeListener("model", new PropertyChangeListener() {
			@Override
			public void propertyChange(PropertyChangeEvent evt) {
				if (isVisible()) {
					update(searchField.getText());
				}
			}
		});
    }

	public void open() {
		if (!isVisible()) {
			setVisible(true);
			update(searchField.getText());
		} else {
			searchField.selectAll();
		}
		searchField.grabFocus();
	}

    private void close() {
		setVisible(false);
		update();
	}

	private void update(String searchText) {
		// TODO
		System.out.println(searchText);
		
		update();
	}

	private void update() {
		table.repaint(); // TODO
	}
	
	public String markOccurrence(String text) {
		if (!isVisible()) {
			return null;
		}
		
		// TODO
		
		return null;
	}

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jToolBar1 = new javax.swing.JToolBar();
        searchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.add(searchField);

        jLabel1.setText(" ");
        jToolBar1.add(jLabel1);

        prevButton.setText("Previous");
        prevButton.setToolTipText("Find the previous occurrence of the phrase.");
        prevButton.setFocusable(false);
        prevButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        prevButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(prevButton);

        nextButton.setText("Next");
        nextButton.setToolTipText("Find the next occurrence of the phrase.");
        nextButton.setFocusable(false);
        nextButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(nextButton);

        closeButton.setText("Close");
        closeButton.setFocusable(false);
        closeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        closeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(closeButton);

        add(jToolBar1, new java.awt.GridBagConstraints());

        jLabel2.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        add(jLabel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
        update();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
    
	private ImageIcon closeIcon;
	private ImageIcon prevIcon;
	private ImageIcon nextIcon;
	{
		// load images
		closeIcon = UIUtil.readImage("/buttoncancel.png");
		prevIcon = UIUtil.readImage("/prev.png");
		nextIcon = UIUtil.readImage("/next.png");
	}

}
